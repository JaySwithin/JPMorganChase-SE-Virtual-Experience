From cab9f9105a42b7ccb681d64e167df5b17e980258 Mon Sep 17 00:00:00 2001
From: Swithin Annor Okyere <jayswithin@gmail.com>
Date: Thu, 26 May 2022 11:33:36 +0000
Subject: [PATCH] Create Patch File

---
 client.py      |  11 ++++++++---
 client.pyc     | Bin 0 -> 1362 bytes
 client_test.py |  14 +++++++++++++-
 3 files changed, 21 insertions(+), 4 deletions(-)
 create mode 100644 client.pyc

diff --git a/client.py b/client.py
index 40badcd..9defb40 100644
--- a/client.py
+++ b/client.py
@@ -35,14 +35,17 @@ def getDataPoint(quote):
 	stock = quote['stock']
 	bid_price = float(quote['top_bid']['price'])
 	ask_price = float(quote['top_ask']['price'])
-	price = bid_price
+	price = (bid_price + ask_price) / 2
 	return stock, bid_price, ask_price, price
 
 def getRatio(price_a, price_b):
 	""" Get ratio of price_a and price_b """
 	""" ------------- Update this function ------------- """
 	""" Also create some unit tests for this function in client_test.py """
-	return 1
+	if (price_b == 0) :
+		# When price b is 0, avoid throwing ZeroDivisionError
+		return
+	return price_a/price_b
 
 # Main
 if __name__ == "__main__":
@@ -52,8 +55,10 @@ if __name__ == "__main__":
 		quotes = json.loads(urllib2.urlopen(QUERY.format(random.random())).read())
 
 		""" ----------- Update to get the ratio --------------- """
+		prices = {}
 		for quote in quotes:
 			stock, bid_price, ask_price, price = getDataPoint(quote)
+			prices[stock] = price
 			print "Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price)
 
-		print "Ratio %s" % getRatio(price, price)
+		print "Ratio %s" % getRatio(prices['ABC'], prices['DEF'])
diff --git a/client.pyc b/client.pyc
new file mode 100644
index 0000000000000000000000000000000000000000..9f556d3107dcb48d8f96e6a9107c8afaea78414a
GIT binary patch
literal 1362
zcmbtTUvJz*5dW?1Tyxh;o90jHy)8%;u0*(&rz&cpB?(1HMCnCUg$1&F-bv0EpMCM}
zL8@M!(sw=pAAlFW9lXQL=B^+f!S>G1%+Act{AL{fzSbG1KM!*(o*TSB<7L+rVE9ug
zf#f}}kf^0TKoTtZ5J?Ebnh1vZ6_^O`*s%q(;+Y$uRhSme0yJ%P@f)ZOTEUgV{tv$(
z>3{-^Z-Rhv7ZhQ<1`06_aRo8rZ+vUPC$~{>=yhBifNrz@QzUmlEzljY`#wUlfn*cO
z7Lsicf9s$PJTaWZ251wsCEAk+cVB#c{wrRaRS=)8!?e+pt%KfG;7?ESy7DL-$2S?4
z;!l1K?T5^coSW|U`(>SH<*2r9_wmEW5BujcYTkTNn5S<qi$55`oEKJjMZETS*&`-%
zAF_9;;I4%LJ%+8v*<S`rUG%pu#5}+}#0L!K_GN^*S}5j`lyMxlB=Rm3ebm%umXprP
zQr9QijYwBShK&9(D`#Z2tMw^W)MSp0w8>mHt&7TOCs|ro=Vwlaz}3@qSQxLJHbqYF
zwV6FD0=9^yG=F|l)|rdN-;3w7+R=a|xHc1xl3qs;iM_9-fsY|pu@L)+N&l6l#`f(`
zg&P%Bf1m6b=h6S>=-a&=NBL;SvHQ-WeqI(-xlgBWT$jC0$?bC)N4^XR)nS6Lqqg|H
zrE<AwxqJ)mv4SDw*_LVKeg`<_mauC3I1c&He#At-Ag39oq81>11!<<U$}ISy<|zaY
zefqIn;2~NV{(~Q0TZr+0ta6oIxypeg^FYE#zY%qVNI5x6(@9oTX=*=a;ibTD^nI%{
zr(;Hc_rCo^GjM+Q=`r`fildLnrcSDU{^g$E_Yb~`@3QPmm^Ect3_o)+zpj{&XU4X!
zoaE3j9QDL^{pG8J!FNt(;&9+Y%m1>-uF58qrrzU%UAPpnOT8b@j<L(D>M8eC0-w~)
zBy;|<hBD)Iey*%%eHC^fBj*QgAU*?`+kcH!%&Px``jZL&P9=T5Enzg1uJUi#3R^+D
U-R^Y5O|=uY)S9}dI;t1^1w&vTSpWb4

literal 0
HcmV?d00001

diff --git a/client_test.py b/client_test.py
index a608a01..ccb5902 100644
--- a/client_test.py
+++ b/client_test.py
@@ -1,5 +1,5 @@
 import unittest
-from client import getDataPoint
+from client import getDataPoint, getRatio
 
 class ClientTest(unittest.TestCase):
   def test_getDataPoint_calculatePrice(self):
@@ -8,6 +8,8 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote),((quote["stock"],quote['top_bid']['price'],quote['top_ask']['price'],(quote['top_bid']['price']+quote['top_ask']['price'])/2)))
 
   def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
     quotes = [
@@ -15,10 +17,20 @@ class ClientTest(unittest.TestCase):
       {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
     ]
     """ ------------ Add the assertion below ------------ """
+    for quote in quotes:
+      self.assertEqual(getDataPoint(quote),((quote["stock"],quote['top_bid']['price'],quote['top_ask']['price'],(quote['top_bid']['price']+quote['top_ask']['price'])/2)))
+
 
 
   """ ------------ Add more unit tests ------------ """
+  def test_getRatio(self):
+    prices=[121.2,121.68,119.2,121.68,117.7,119.1,120.09,118.8,120.45,145.56,0,34.4]
+    for i in range(0,len(prices),2):
+       self.assertEqual((prices[i]/prices[i+1]) ,getRatio(prices[i],prices[i+1]))
 
+  def test_getRatio_zeroDivisionError(self):
+       self.assertEqual(None ,getRatio(121.1,0))
+       
 
 
 if __name__ == '__main__':
-- 
2.30.1 (Apple Git-130)

